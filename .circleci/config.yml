version: 2.1

commands:
  setup:
    steps:
      - checkout

      - restore_cache:
          keys:
          - dependencies-{{ checksum "poetry.lock" }}

      - run:
          name: Install dependencies
          command: poetry install

      - save_cache:
          key: dependencies-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

jobs:
  lint:
    docker:
      - image: circleci/python:3.6
    steps:
      - setup

      - run:
          name: Install reviewdog
          command: |
            curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b ./bin

      - run:
          name: Get files to lint
          command: |
            mkdir -p tmp
            git diff origin/master --name-only --diff-filter=d > tmp/files_to_lint

      - run:
          name: Run linter
          shell: /bin/bash
          command: |
            cat tmp/files_to_lint | grep -E '.+\.(py)$' \
            | xargs poetry run pylint -E --msg-template="{path}:{line}:{column}: {msg}" \
            | ./bin/reviewdog -reporter=github-pr-review -efm="%f:%l:%c: %m"
  test:
    docker:
      - image: circleci/python:3.6
    steps:
      - setup

      - run:
          name: Run tests
          command: poetry run python -m unittest
  publish:
    docker:
      - image: circleci/python:3.6
    steps:
      - setup

      - run:
          name: Validate pyproject.toml and __init__.py versions match
          command: |
            TOML_VERSION=$(awk -F'[ ="]+' '$1 == "version" {print $2}' pyproject.toml)
            INIT_VERSION=$(awk -F'[ ="]+' '$1 == "__version__" {print $2}' fintoc/__init__.py)
            if [ $TOML_VERSION != $INIT_VERSION ]; then
                echo "Versions of pyproject.toml ($TOML_VERSION) and __init__.py ($INIT_VERSION) do not match"
                exit 1
            fi

      - run:
          name: Build package
          command: poetry build

      - run:
          name: Publish package to pypi
          command: poetry publish -u $PYPI_USERNAME -p $PYPI_PASSWORD
workflows:
  version: 2
  lint_and_test:
    jobs:
      - test
      - lint:
          context: org-global

  build_test_release:
    jobs:
      - test:
          filters: &tagged-release-filter
            tags:
              only: /^\d+\.\d+\.\d+((a|b|rc)\d)?$/ # matches 1.2.3, 1.2.3a1, 1.2.3b1, 1.2.3rc1 etc..
      - publish:
          requires:
            - test
          filters:
            <<: *tagged-release-filter
            branches:
              ignore: /.*/
